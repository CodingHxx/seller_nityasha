import React, { useEffect, useState } from 'react';
import { View, Text, ActivityIndicator, Alert } from 'react-native';
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { useNavigation } from '@react-navigation/native';
import tw from 'twrnc'; 

const MessagesPendingH = () => {
    const [consultants, setConsultants] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [userId, setUserId] = useState(null);
    const [reloadKey, setReloadKey] = useState(0);
    const navigation = useNavigation();
    const [lastConsultantCount, setLastConsultantCount] = useState(0); // To track consultants count

    // Request permission for push notifications
    const requestPermissions = async () => {
        const { status: existingStatus } = await Notifications.getPermissionsAsync();
        let finalStatus = existingStatus;

        if (existingStatus !== 'granted') {
            const { status } = await Notifications.requestPermissionsAsync();
            finalStatus = status;
        }

        if (finalStatus !== 'granted') {
            Alert.alert('Permission Denied', 'Failed to get push token for notifications.');
            return;
        }

        const token = (await Notifications.getExpoPushTokenAsync()).data;
        console.log('Expo Push Token:', token); // Use this token for server push notifications
    };

    // Fetch consultants and check for new consultants
    const fetchConsultants = async () => {
        setLoading(true);
        try {
            const storedUserId = await AsyncStorage.getItem('userId');
            if (!storedUserId) {
                throw new Error('User ID not found in storage');
            }

            setUserId(storedUserId);
            const response = await fetch(`https://nityasha.vercel.app/api/v1/${storedUserId}`);

            if (!response.ok) {
                throw new Error('Failed to fetch data');
            }

            const data = await response.json();

            if (Array.isArray(data)) {
                // Check if new consultants are available
                if (lastConsultantCount < data.length) {
                    // Send a local notification
                    await Notifications.scheduleNotificationAsync({
                        content: {
                            title: 'New Consultant Available',
                            body: 'A new consultant is pending approval.',
                        },
                        trigger: null, // Send immediately
                    });
                }

                setLastConsultantCount(data.length); // Update consultant count
                setConsultants(data);
            } else {
                throw new Error('Invalid data format');
            }
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    // Initialize the notification permissions and fetch consultants
    useEffect(() => {
        let isMounted = true; // Track if component is still mounted
        requestPermissions(); // Ask for notification permissions

        if (isMounted) fetchConsultants(); // Initial fetch

        // Set interval for auto-reloading every 10 seconds
        const intervalId = setInterval(() => {
            if (isMounted) {
                fetchConsultants();
                setReloadKey(prevKey => prevKey + 1); // Update reload key to force re-render
            }
        }, 10000); // 10 seconds

        return () => {
            clearInterval(intervalId);
            isMounted = false; // Cleanup function to prevent state updates on unmounted components
        };
    }, []);

    // Handle press on a consultant
    const handlePress = (consultantId) => {
        navigation.navigate('ChatScreen', { consultantId });
    };

    if (error) {
        return (
            <View style={tw`flex-1 justify-center items-center`}>
                <Text style={tw`text-red-500`}>{error}</Text>
            </View>
        );
    }

    return (
        <View style={tw`flex-1`}>
            {loading ? (
                <View style={tw`flex-1 justify-center items-center`}>
                    <ActivityIndicator size="large" color="#0000ff" />
                </View>
            ) : (
                <>
                    {consultants.length > 0 ? (
                        consultants.map((consultant, index) => (
                            <TouchableOpacity
                                key={index}
                                style={tw`p-4 border-b border-gray-200`}
                                onPress={() => handlePress(consultant.userId)}
                            >
                                <Text>{consultant.consultantDetails.name}</Text>
                                <Text>{consultant.requestDetails?.time} mins</Text>
                            </TouchableOpacity>
                        ))
                    ) : (
                        <View style={tw`flex-1 justify-center items-center`}>
                            <Text>No pending consultants.</Text>
                        </View>
                    )}
                </>
            )}
        </View>
    );
};

export default MessagesPendingH;
